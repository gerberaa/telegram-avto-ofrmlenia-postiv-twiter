import logging
import os
import random
import requests
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
TELEGRAM_TOKEN = '8178078578:AAFxzfWH98Lo1w55wHlQlX16BkRitHJZsPY'  # <-- –í—Å—Ç–∞–≤ —Å—é–¥–∏ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω
GEMINI_API_KEY = 'AIzaSyDnvjGm9g3XAIBfZcaXLhNXMmlqQtjDOBQ'
GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=' + GEMINI_API_KEY

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# --- –°–µ—Ç–∞–ø–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è ---
STYLES = [
    {
        'name': '–ï–º–æ–¥–∑—ñ + –∂–∏—Ä–Ω–∏–π',
        'prompt': '–î–æ–¥–∞–π –¥–æ —Ç–µ–∫—Å—Ç—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ –µ–º–æ–¥–∑—ñ, –∑—Ä–æ–±–∏ –≤–∞–∂–ª–∏–≤—ñ —Å–ª–æ–≤–∞ –∂–∏—Ä–Ω–∏–º–∏ (bold unicode), –æ—Ñ–æ—Ä–º–∏ —è–∫ –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏–π —Ç–≤—ñ—Ç.'
    },
    {
        'name': '–ö—Ä–µ–∞—Ç–∏–≤–Ω–∏–π —à—Ä–∏—Ñ—Ç',
        'prompt': '–û—Ñ–æ—Ä–º–∏ —Ç–µ–∫—Å—Ç –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏—Ö unicode-—à—Ä–∏—Ñ—Ç—ñ–≤, –¥–æ–¥–∞–π –µ–º–æ–¥–∑—ñ, –∑—Ä–æ–±–∏ –ø–æ—Å—Ç —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º –¥–ª—è Twitter.'
    },
    {
        'name': '–ú—ñ–Ω—ñ–º–∞–ª—ñ–∑–º',
        'prompt': '–û—Ñ–æ—Ä–º–∏ —Ç–µ–∫—Å—Ç —Å—Ç–∏–ª—å–Ω–æ, –º—ñ–Ω—ñ–º–∞–ª—ñ—Å—Ç–∏—á–Ω–æ, –¥–æ–¥–∞–π 1-2 –µ–º–æ–¥–∑—ñ, –∑—Ä–æ–±–∏ —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–º –¥–ª—è Twitter.'
    },
    # –î–æ–¥–∞–π —â–µ —Å—Ç–∏–ª—ñ –∑–∞ –±–∞–∂–∞–Ω–Ω—è–º
]

def generate_prompt(user_text: str, style: dict) -> str:
    # –î–æ–¥–∞—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –µ–º–æ–¥–∑—ñ —Ä–∞–∫–µ—Ç–∏
    return f"{style['prompt']} –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –µ–º–æ–¥–∑—ñ —Ä–∞–∫–µ—Ç–∏ (üöÄ) —É –∂–æ–¥–Ω–æ–º—É –≤–∞—Ä—ñ–∞–Ω—Ç—ñ. –û—Å—å —Ç–µ–∫—Å—Ç: {user_text}"

# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–∏—Ç—É –¥–æ Gemini ---
def ask_gemini(user_text: str, style: dict) -> str:
    prompt = generate_prompt(user_text, style)
    data = {
        "contents": [
            {"parts": [{"text": prompt}]}
        ]
    }
    headers = {"Content-Type": "application/json"}
    response = requests.post(GEMINI_API_URL, json=data, headers=headers)
    if response.status_code == 200:
        try:
            result = response.json()
            return result['candidates'][0]['content']['parts'][0]['text']
        except Exception as e:
            return f"[–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ Gemini: {e}]"
    else:
        return f"[–ü–æ–º–∏–ª–∫–∞ Gemini API: {response.status_code}]"

# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å—Ç–∞—Ä—Ç—É ---
@dp.message_handler(commands=['start'])
async def start_handler(message: Message):
    await message.reply("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Ç–µ–∫—Å—Ç, —ñ —è –æ—Ñ–æ—Ä–º–ª—é –π–æ–≥–æ –¥–ª—è Twitter –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AI ‚ú®\n\n–ú–æ–∂–µ—à —Ç–∞–∫–æ–∂ –Ω–∞–ø–∏—Å–∞—Ç–∏ /style –¥–ª—è –≤–∏–±–æ—Ä—É —Å—Ç–∏–ª—é.")

# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–∏–±–æ—Ä—É —Å—Ç–∏–ª—é ---
@dp.message_handler(commands=['style'])
async def style_handler(message: Message):
    text = "–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è (–≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –Ω–æ–º–µ—Ä):\n"
    for i, style in enumerate(STYLES, 1):
        text += f"{i}. {style['name']}\n"
    await message.reply(text)

# --- –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∏–ª—å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ---
user_styles = {}

@dp.message_handler(lambda m: m.text and m.text.isdigit() and 1 <= int(m.text) <= len(STYLES))
async def set_style_handler(message: Message):
    idx = int(message.text) - 1
    user_styles[message.from_user.id] = idx
    await message.reply(f"–°—Ç–∏–ª—å '{STYLES[idx]['name']}' –æ–±—Ä–∞–Ω–æ! –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è.")

# --- –û—Å–Ω–æ–≤–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç—É ---
@dp.message_handler(lambda m: m.text and not m.text.startswith('/'))
async def main_handler(message: Message):
    user_text = message.text
    progress_msg = await message.reply("–ì–µ–Ω–µ—Ä—É—é –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è... ‚è≥")
    responses = []
    for idx, style in enumerate(STYLES):
        await progress_msg.edit_text(f"–ì–µ–Ω–µ—Ä—É—é –≤–∞—Ä—ñ–∞–Ω—Ç {idx+1} –∑ {len(STYLES)}... ‚è≥")
        result = ask_gemini(user_text, style)
        responses.append((idx, style['name'], result))
    await progress_msg.edit_text("–ì–æ—Ç–æ–≤–æ! –û—Å—å –≤–∞—à—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏:")
    for idx, name, result in responses:
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton('–ü–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ –Ω–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É', callback_data=f'translate_{idx}'))
        text = f"<b>–°—Ç–∏–ª—å {idx+1}: {name}</b>\n<code>\n{result}\n</code>"
        await message.reply(text, parse_mode='HTML', reply_markup=kb)

# --- –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É ---
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('translate_'))
async def translate_handler(callback_query: CallbackQuery):
    idx = int(callback_query.data.split('_')[1])
    last_message = callback_query.message.text
    # –í–∏—Ç—è–≥—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É (–ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ \n)
    text_to_translate = last_message.split('\n', 1)[-1]
    prompt = f"–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Ü–µ–π —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∏—Ä–æ–¥–Ω—å–æ –¥–ª—è Twitter:\n{text_to_translate}"
    data = {
        "contents": [
            {"parts": [{"text": prompt}]}
        ]
    }
    headers = {"Content-Type": "application/json"}
    response = requests.post(GEMINI_API_URL, json=data, headers=headers)
    if response.status_code == 200:
        try:
            result = response.json()
            translated = result['candidates'][0]['content']['parts'][0]['text']
        except Exception as e:
            translated = f"[–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ Gemini: {e}]"
    else:
        translated = f"[–ü–æ–º–∏–ª–∫–∞ Gemini API: {response.status_code}]"
    await callback_query.answer()  # –ü—Ä–∏–±—Ä–∞—Ç–∏ "–≥–æ–¥–∏–Ω–Ω–∏–∫"
    await callback_query.message.reply(f"<b>–ü–µ—Ä–µ–∫–ª–∞–¥ –Ω–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É:</b>\n{translated}", parse_mode='HTML')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True) 